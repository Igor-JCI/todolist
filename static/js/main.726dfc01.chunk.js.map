{"version":3,"sources":["serviceWorker.ts","API/instance.ts","API/todolists-api.ts","features/CommonActions/ApplicationsCommonActions.ts","utils/error-utils.ts","features/TodolistsList/Todolist/todolists-reducer.ts","API/types.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","features/TodolistsList/Todolist/Task/index.tsx","API/auth-api.ts","features/Auth/auth-reducer.ts","features/Application/application-reducer.ts","features/Auth/selectors.ts","utils/redux-utils.ts","features/Auth/Login.tsx","features/Auth/index.tsx","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackBar/ErrorSnackbar.tsx","app/selectors.ts","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","toDoListsAPI","get","title","post","toDoListId","delete","put","todolistId","toDoListID","taskId","model","setAppStatus","createAction","setAppError","handleAsyncServerAppError","data","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsError","fieldsErrors","handleAsyncServerNetworkError","message","undefined","i","v1","TaskStatuses","TaskPriorities","fetchToDoListTC","createAsyncThunk","param","res","todolists","removeToDoListTC","changeTodolistEntityStatus","id","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","t","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","tl","splice","unshift","toDoListsReducer","reducer","actions","todolistsActions","removeTask","fetchTasks","tasks","items","addTask","updateTask","getState","task","find","apiModel","deadline","description","priority","Low","startDate","asyncAction","tasksReducer","forEach","todoListId","tasksActions","tasksAsyncActions","authAPI","login","logout","asyncActions","isLoggedIn","setIsLoggedIn","value","authReducer","initializeApp","applicationReducer","isInitialized","selectIsLoggedIn","auth","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Login","useSelector","authSelectors","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","variant","color","rootReducer","combineReducers","toDoLists","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleWare","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","size","onClick","style","marginLeft","ControlPoint","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","key","className","Completed","position","New","top","right","Delete","fontSize","Todolist","demo","useEffect","onFilterButtonClickHandler","addTaskCallBack","helper","thunk","errorMessage","changeTodolistTitle","newTitle","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","padding","TodolistsList","tasksObj","addTodolistCallBack","spacing","flexWrap","overflowX","width","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Stack","sx","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","App","appSelectors","console","log","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.726dfc01.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios/index\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"8c42f357-e574-4a47-b1b5-8938589ef98b\"\r\n    }\r\n}\r\nexport const instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})","import {ResponseTasksType, ResponseType, taskDataType, TaskType, TodolistsType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\n//api\r\nexport const toDoListsAPI = {\r\n    getToDoLists() {\r\n        return instance.get<Array<TodolistsType>>(\"todo-lists\")\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistsType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodolist(toDoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${toDoListId}`)\r\n    },\r\n    UpdateTodolistTitle(toDoListId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${toDoListId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        const promise = instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TaskType }>>(\r\n            `todo-lists/${todolistId}/tasks`, {title})\r\n        return promise\r\n    },\r\n    deleteTask(toDoListID: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType<{ item: TaskType }>>(`todo-lists/${toDoListID}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    UpdateTaskTitle(toDoListID: string, taskId: string, model: taskDataType) {\r\n        const promise = instance.put<ResponseType<{ item: taskDataType }>>(`todo-lists/${toDoListID}/tasks/${taskId}`, model)\r\n        return promise\r\n    }\r\n}\r\n\r\n","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application\";\r\n\r\n\r\nexport const setAppStatus = createAction<{ status: RequestStatusType }>(\"common/setAppStatus\")\r\nexport const setAppError = createAction<{ error: string | null }>(\"common/setAppError\")","import {setAppError, setAppStatus} from \"../features/CommonActions/ApplicationsCommonActions\";\r\nimport {ResponseType} from \"../API/types\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any,\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>, thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n       return thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : \"Some error occurred\"}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: \"failed\"}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsError: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: any, thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        return thunkAPI.dispatch(setAppError({error: error.message ? error.message : \"Some error occurred\"}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: \"failed\"}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsError: undefined})\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {toDoListsAPI} from \"../../../API/todolists-api\";\r\nimport {TodolistsType} from \"../../../API/types\";\r\nimport {RequestStatusType} from \"../../Application/application-reducer\";\r\nimport {setAppStatus} from \"../../CommonActions/ApplicationsCommonActions\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError\r\n} from \"../../../utils/error-utils\";\r\nimport {ThunkError} from \"../../../utils/types\";\r\n\r\nexport let toDoListId1 = v1()\r\nexport let toDoListId2 = v1()\r\n\r\nconst fetchToDoListTC = createAsyncThunk<{ todolists: TodolistsType[] }, undefined, ThunkError>(\"todolists/fetchTodolists\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await toDoListsAPI.getToDoLists()\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeToDoListTC = createAsyncThunk<{ id: string }, string, ThunkError>(\"todolists/removeToDoList\", async (toDoListId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({id: toDoListId, status: \"loading\"}))\r\n    await toDoListsAPI.deleteTodolist(toDoListId)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {id: toDoListId}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistsType }, string, ThunkError>(\"todolists/addTodolist\", async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    const res = await toDoListsAPI.createToDoList(title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk(\"todolists/changeTodolistTitle\", async (param: { id: string, title: string }, thunkAPI) => {\r\n    const res = await toDoListsAPI.UpdateTodolistTitle(param.id, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, true)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: \"toDoLists\",\r\n    initialState: [] as Array<TodolistsDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchToDoListTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(removeToDoListTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const toDoListsReducer = slice.reducer\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\nexport const todolistsActions = {\r\n    fetchToDoListTC,\r\n    removeToDoListTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n    changeTodolistFilter,\r\n    changeTodolistEntityStatus\r\n}\r\n\r\n//types\r\n\r\nexport type TodolistsDomainType = TodolistsType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n","//types\r\nexport type  LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string,\r\n    deadline: string,\r\n    description: string,\r\n    id: string,\r\n    order: number,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    status: TaskStatuses,\r\n    title: string,\r\n    todoListId: string\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: D,\r\n    fieldsErrors?: Array<FieldErrorType>,\r\n}\r\nexport type ResponseTasksType = {\r\n    error: null | string,\r\n    items: TaskType[],\r\n    totalCount: number,\r\n}\r\nexport type taskDataType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string\r\n}","import {taskDataType, TaskPriorities, TaskStatuses, TaskType} from \"../../../../API/types\";\r\nimport {toDoListsAPI} from \"../../../../API/todolists-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {setAppStatus} from \"../../../CommonActions/ApplicationsCommonActions\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from \"../../../../utils/error-utils\";\r\nimport {AppRootState, ThunkError} from \"../../../../utils/types\";\r\nimport {todolistsActions} from \"../todolists-reducer\"\r\n\r\nexport const removeTask = createAsyncThunk(\"tasks/removeTask\", async (param: { taskId: string, toDoListId: string }, thunkAPI) => {\r\n    await toDoListsAPI.deleteTask(param.toDoListId, param.taskId)\r\n    return ({taskId: param.taskId, toDoListId: param.toDoListId})\r\n})\r\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await toDoListsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {tasks, todolistId}\r\n    } catch (error:any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n\r\n\r\n})\r\nexport const addTask = createAsyncThunk<TaskType,\r\n    { title: string, toDoListId: string }, ThunkError>(\"tasks/addTask\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await toDoListsAPI.createTask(param.toDoListId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nexport const updateTask = createAsyncThunk(\"tasks/updateTask\", async (param: { taskId: string, model: UpdateDomainTaskModelType, toDoListId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootState\r\n    const task = state.tasks[param.toDoListId].find((t) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue(\"task not found in the state\")\r\n    }\r\n    const apiModel: taskDataType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: TaskPriorities.Low,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n    const res = await toDoListsAPI.UpdateTaskTitle(param.toDoListId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncAction = {\r\n    removeTask,\r\n    fetchTasks,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(todolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(todolistsActions.removeToDoListTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(todolistsActions.fetchToDoListTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.toDoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.toDoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string,\r\n    description?: string,\r\n    status?: TaskStatuses,\r\n    priority?: TaskPriorities,\r\n    startDate?: string,\r\n    deadline?: string\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import {asyncAction as tasksAsyncActions, tasksReducer} from \"./tasks-reducer\"\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksReducer\r\n}","import {LoginParamsType, ResponseType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"auth/me\")\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>(\"auth/me\")\r\n    }\r\n}","import {FieldErrorType, LoginParamsType} from \"../../API/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../../API/auth-api\";\r\nimport { setAppStatus } from \"../CommonActions/ApplicationsCommonActions\";\r\n\r\n//thunks\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsError?: Array<FieldErrorType> } }>(\"auth/login\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk(\"auth/logout\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            }\r\n        );\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n\r\n    }\r\n})\r\n\r\nexport const {setIsLoggedIn} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\n\r\n","import {setIsLoggedIn} from \"../Auth/auth-reducer\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../../API/auth-api\";\r\nimport {setAppError, setAppStatus} from \"../CommonActions/ApplicationsCommonActions\";\r\n\r\nconst initializeApp = createAsyncThunk(\"application/initializeApp\", async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}))\r\n    } else {\r\n    }\r\n})\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport const applicationReducer = slice.reducer\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n    //true когда приложение проинициализировалось (проверка логинизации, проверили юзера, настроййки получили и т.д.)\r\n}\r\n","import {AppRootState} from \"../../utils/types\";\r\n\r\n\r\nexport const selectIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn;","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n    return boundActions\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authActions, authSelectors} from \"./\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    type FormValuesType = {\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n            validate: (values) => {\r\n                if (!values.email) {\r\n                    return {\r\n                        email: \"email is requred\"\r\n                    }\r\n                }\r\n                if (!values.password) {\r\n                    return {\r\n                        password: \"password is requred\"\r\n                    }\r\n                }\r\n            },\r\n            initialValues: {\r\n                email: \"\",\r\n                password: \"\",\r\n                rememberMe: false\r\n            },\r\n            onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n                const resultAction = await dispatch(authActions.login(values))\r\n                if (login.rejected.match(resultAction)) {\r\n                    if (resultAction.payload?.fieldsError?.length) {\r\n                        const error = resultAction.payload?.fieldsError[0]\r\n                        formikHelpers.setFieldError(error.field, error.error)\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    ;\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}\r\n                               rel=\"noopener noreferrer\"\r\n                            > here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")}\r\n                            checked={formik.values.rememberMe}\r\n                        />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import * as authSelectors from \"./selectors\"\r\nimport {Login} from \"./Login\"\r\nimport {asyncActions, slice, authReducer, logout} from \"./auth-reducer\"\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    logout,\r\n    authReducer,\r\n    authActions\r\n}","import {combineReducers} from \"redux\";\r\nimport {toDoListsReducer} from \"../features/TodolistsList/Todolist/\";\r\nimport {tasksReducer} from \"../features/TodolistsList/Todolist/Task/\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport {applicationReducer} from \"../features/Application\";\r\nimport {authReducer} from \"../features/Auth/\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    toDoLists: toDoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: applicationReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n/*export const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))*/\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleWare),\r\n\r\n})\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ControlPoint} from \"@mui/icons-material\";\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void,\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label=\"Type value\" variant=\"outlined\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton disabled={disabled} size={\"large\"} onClick={addItemHandler} color={\"primary\"}\r\n                    style={{marginLeft: \"5px\"}}> <ControlPoint/></IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        setTitle(value)\r\n    }\r\n    return editMode\r\n        ? <TextField variant={\"filled\"} onChange={onChangeTitleHandler} value={title} autoFocus={true}\r\n                     onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskStatuses} from \"../../../../API/types\";\r\nimport {tasksActions} from \"../../index\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\n\r\ntype TaskPropsType = {\r\n    taskId: string\r\n    todoListId: string\r\n    status: TaskStatuses\r\n    title: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n    const onRemoveHandler = () => {\r\n        removeTask({taskId: props.taskId, toDoListId: props.todoListId})\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.taskId,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            toDoListId: props.todoListId\r\n        })\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        updateTask({taskId: props.taskId, model: {title: newValue}, toDoListId: props.todoListId})\r\n    }, [updateTask, props.taskId, props.todoListId])\r\n    return (\r\n        <div key={props.taskId} className={props.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n             style={{position: \"relative\"}}>\r\n            <Checkbox checked={props.status === TaskStatuses.Completed} onChange={onChangeStatusHandler}/>\r\n            <EditableSpan title={props.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton size={\"small\"} onClick={onRemoveHandler} style={{position: \"absolute\", top: \"2px\", right: \"2px\"}}><Delete\r\n                fontSize={\"small\"}/></IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../API/types\";\r\nimport {FilterValuesType, TodolistsDomainType} from \"./todolists-reducer\";\r\nimport {tasksActions} from \"./Task\";\r\nimport { todolistsActions} from \"./todolists-reducer\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    const {changeTodolistFilter, removeToDoListTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [demo, fetchTasks, props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => {\r\n        changeTodolistFilter({id: props.todolist.id, filter})\r\n    }, [props.todolist.id, changeTodolistFilter])\r\n    const removeToDoList = () => {\r\n        removeToDoListTC(props.todolist.id)\r\n    }\r\n    const addTaskCallBack = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title, toDoListId: props.todolist.id})\r\n\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occured\")\r\n            }\r\n        } else {\r\n            helper.setTitle(\"\")\r\n        }\r\n\r\n    }, [props.todolist.id, dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: newTitle})\r\n    }, [props.todolist.id, changeTodolistTitleTC])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: ColorPropsType,\r\n                                text: string) => {\r\n        return <Button color={color} variant={props.todolist.filter === buttonFilter ? \"contained\" : \"text\"}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return (\r\n        <Paper style={{padding: \"10px\", position: \"relative\"}}>\r\n\r\n            <IconButton onClick={removeToDoList}\r\n                        size={\"small\"}\r\n                        disabled={props.todolist.entityStatus === \"loading\"}\r\n                        style={{position: \"absolute\", right: \"0px\", top: \"0px\"}}\r\n            ><Delete fontSize={\"small\"}/></IconButton>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallBack} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map((t) => {\r\n                            return <Task\r\n                                taskId={t.id}\r\n                                todoListId={props.todolist.id}\r\n                                status={t.status}\r\n                                title={t.title}\r\n                                key={t.id}\r\n                            />\r\n                        }\r\n                    )\r\n                }\r\n                {!tasksForTodolist.length && <div style={{padding: \"10px\", color: \"grey\"}}>No task</div>}\r\n            </div>\r\n            <div>\r\n                {renderFilterButton(\"all\", 'inherit', \"All\")}\r\n                {renderFilterButton(\"active\", 'primary', \"Active\")}\r\n                {renderFilterButton(\"completed\", 'secondary', \"Completed\")}\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\ntype ColorPropsType = 'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning'\r\ntype PropsType = {\r\n    todolist: TodolistsDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../utils/types\";\r\nimport {TodolistsDomainType} from \"./Todolist/todolists-reducer\";\r\nimport {TaskStateType} from \"./Todolist/Task/tasks-reducer\";\r\nimport {Grid} from \"@mui/material\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {tasksActions, todolistsActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const toDoLists = useSelector<AppRootState, Array<TodolistsDomainType>>(state => state.toDoLists)\r\n    const tasksObj = useSelector<AppRootState, TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {fetchToDoListTC} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n    const addTodolistCallBack = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occured\")\r\n            }\r\n        } else {\r\n            helper.setTitle(\"\")\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchToDoListTC()\r\n    }, [demo, fetchToDoListTC, isLoggedIn])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolistCallBack}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: \"nowrap\", overflowX: \"scroll\"}}>\r\n            {\r\n                toDoLists.map(tl => {\r\n                    let allTodolistTasks = tasksObj[tl.id]\r\n                    let tasksForTodolist = allTodolistTasks\r\n                    return <Grid item>\r\n                        <div style={{width: \"300px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                key={tl.id}\r\n                                tasks={tasksForTodolist}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import {asyncAction as tasksAsyncActions} from \"./Todolist/Task/tasks-reducer\"\r\nimport {todolistsActions} from \"./Todolist\";\r\nimport {TodolistsList} from \"./TodolistsList\"\r\n\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../utils/types\";\r\nimport {setAppError} from \"../../features/CommonActions/ApplicationsCommonActions\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    /* const [open, setOpen] = React.useState(true);*/\r\n\r\n\r\n    const error = useSelector<AppRootState, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n        /* setOpen(false);*/\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import {AppRootState} from \"./../utils/types\";\r\n\r\n\r\nexport const selectStatus = (state: AppRootState) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootState) => state.app.isInitialized;","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {TodolistsList} from \"../features/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {asyncActions} from \"../features/Application/\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {authActions, Login} from \"../features/Auth/\";\r\nimport {appSelectors} from \"./\";\r\nimport {authSelectors} from \"../features/Auth\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(asyncActions)\r\n    console.log(1212)\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [demo, initializeApp])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/todolist\"} element={<TodolistsList demo={demo}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}